# Based off of travis.yml from https://github.com/felixduvallet/ros-travis-integration by Felix Duvallet <felixd@gmail.com>

# NOTE: The build lifecycle on Travis.ci is something like this:
#    before_install
#    install
#    before_script
#    script
#    after_success or after_failure
#    after_script
#    OPTIONAL before_deploy
#    OPTIONAL deploy
#    OPTIONAL after_deploy

################################################################################

# Use ubuntu trusty (14.04) with sudo privileges.
dist: trusty
sudo: required
language:
  - generic
cache:
  - apt

# Configuration variables. All variables are global now, but this can be used to
# trigger a build matrix for different ROS distributions if desired.
env:
  global:
    - ROS_DISTRO=indigo
    - ROS_CI_DESKTOP="`lsb_release -cs`"  # e.g. [precise|trusty|...]
    - CI_SOURCE_PATH=$(pwd)
    - ROSINSTALL_FILE=$CI_SOURCE_PATH/dependencies.rosinstall
    - CATKIN_OPTIONS=$CI_SOURCE_PATH/catkin.options
    - ROS_PARALLEL_JOBS='-j8 -l6'
    # Set the python path manually to include /usr/-/python2.7/dist-packages
    # as this is where apt-get installs python packages.
    - PYTHONPATH=$PYTHONPATH:/usr/lib/python2.7/dist-packages:/usr/local/lib/python2.7/dist-packages

################################################################################

# Install system dependencies, namely a very barebones ROS setup.
before_install:
  - sudo sh -c "echo \"deb http://packages.ros.org/ros/ubuntu $ROS_CI_DESKTOP main\" > /etc/apt/sources.list.d/ros-latest.list"
  - sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116
  - sudo apt-get update -qq
  - sudo apt-get install -y python-catkin-pkg python-rosdep python-wstool ros-$ROS_DISTRO-catkin
  - sudo apt-get install ros-$ROS_DISTRO-sensor-msgs ros-$ROS_DISTRO-geometry-msgs  ros-$ROS_DISTRO-tf-conversions  ros-$ROS_DISTRO-shape-msgs  ros-$ROS_DISTRO-dynamic-reconfigure
  - sudo apt-get install ros-$ROS_DISTRO-sensor-msgs ros-$ROS_DISTRO-pcl-ros

# Create a catkin workspace with the package under integration.
install:
  - cd /home/travis/build/CURG/pc_scene_completion_ws/external
  # Build eigen
  - cd eigen-eigen-07105f7124f9
  - mkdir build
  - cd build
  - cmake ..
  - sudo make install 
  - cd ../..
  - cd Mesh_Reconstruction
  - mkdir build
  - cd build
  - cmake ..
  - sudo make install
  - cd ../..
  - cd Curvox
  - sudo python setup.py install
  - cd ..
  - cd pycollada 
  - sudo python setup.py install
  - cd ..
  - cd python-pcd
  - sudo python setup.py install
  - cd ..
  - cd PyMCubes
  - sudo python setup.py install
  - cd ..
  - cd /home/travis/build/CURG/pc_scene_completion_ws/

# Compile and test (mark the build as failed if any step fails). If the
# CATKIN_OPTIONS file exists, use it as an argument to catkin_make, for example
# to blacklist certain packages.
#
# NOTE on testing: `catkin_make run_tests` will show the output of the tests
# (gtest, nosetest, etc..) but always returns 0 (success) even if a test
# fails. Running `catkin_test_results` aggregates all the results and returns
# non-zero when a test fails (which notifies Travis the build failed).
script:
  - source /opt/ros/$ROS_DISTRO/setup.bash
  - cd /home/travis/build/CURG/pc_scene_completion_ws/src
  - catkin_init_workspace
  - cd ..
  - catkin_make
  - source devel/setup.bash

